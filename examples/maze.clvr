// Maze generator

struct Maze
{
    // Adapted from maze generator in C by Joe Wingbermuehle 19990805

function ShowMaze(uint8_t* maze, uint16_t width, uint16_t height)
{
    for (int16_t y = 0; y < height; y++) {
        for(int16_t x = 0; x < width; x++) {
            switch(maze[y * width + x]) {
                case 1:  core.printf("[]");
                case 2:  core.printf("<>");
                default: core.printf("  ");
            }
        }
        core.printf("\n");
    }
}

function CarveMaze(uint8_t* maze, uint16_t width, uint16_t height, int16_t x, int16_t y)
{
    int16_t dir = core.irand(0, 3);
    int16_t count = 0;
    
    while (count < 4) {
        int16_t dx = 0;
        int16_t dy = 0;
        
        switch(dir) {
            case 0:  dx = 1;
            case 1:  dy = 1;
            case 2:  dx = -1;
            default: dy = -1;
        }
        
        int16_t x1 = x + dx;
        int16_t y1 = y + dy;
        int16_t x2 = x1 + dx;
        int16_t y2 = y1 + dy;
        
        if(x2 > 0 && x2 < width && y2 > 0 && y2 < height
                && maze[y1 * width + x1] == 1 && maze[y2 * width + x2] == 1) {
            maze[y1 * width + x1] = 0;
            maze[y2 * width + x2] = 0;
            x = x2; y = y2;
            dir = core.irand(0, 3);
            count = 0;
        } else {
            dir = (dir + 1) % 4;
            count += 1;
        }
    }
}

function GenerateMaze(uint8_t* maze, uint16_t width, uint16_t height)
{
    uint16_t x;
    
    // Initialize the maze
    for (x = 0; x < width * height; x++) {
        maze[x] = 1;
    }
    maze[1 * width + 1] = 0;

    /* Carve the maze. */
    for (uint16_t y = 1; y < height; y += 2) {
        for(x = 1; x < width; x += 2) {
            CarveMaze(maze, width, height, x, y);
        }
    }

    /* Set up the entry and exit. */
    maze[0 * width + 1] = 0;
    maze[(height - 1) * width + (width - 2)] = 0;
}

function SolveMaze(uint8_t* maze, uint16_t width, uint16_t height)
{
    int16_t dir;
    int16_t count;
    int16_t x;
    int16_t y;
    int16_t dx;
    int16_t dy;
    bool forward;

    /* Remove the entry and exit. */
    maze[0 * width + 1] = 1;
    maze[(height - 1) * width + (width - 2)] = 1;

    forward = true;
    dir = 0;
    count = 0;
    x = 1;
    y = 1;
    while(x != width - 2 || y != height - 2) {
        dx = 0;
        dy = 0;
        
        switch(dir) {
            case 0:  dx = 1;
            case 1:  dy = 1;
            case 2:  dx = -1;
            default: dy = -1;
        }
        
        if((forward  && maze[(y + dy) * width + (x + dx)] == 0)
                || (!forward && maze[(y + dy) * width + (x + dx)] == 2)) {
            maze[y * width + x] = forward ? 2 : 3;
            x += dx;
            y += dy;
            forward = true;
            count = 0;
            dir = 0;
        } else {
            dir = (dir + 1) % 4;
            count += 1;
            if(count > 3) {
                forward = false;
                count = 0;
            }
        }
    }

    /* Replace the entry and exit. */
    maze[(height - 2) * width + (width - 2)] = 2;
    maze[(height - 1) * width + (width - 2)] = 2;
}

const int16_t width = 23;
const int16_t height = 23;

uint8_t maze[width * height];

function int16_t main()
{
    core.printf("Generating %d x %d maze\n", width, height);

    core.printf("\nUnsolved Maze:\n");
    GenerateMaze(maze, width, height);
    ShowMaze(maze, width, height);

    core.printf("\nSolved Maze:\n");
    SolveMaze(maze, width, height);
    ShowMaze(maze, width, height);
    
    return 0;
}



/*

// Max width and height 255
const int16_t Width = 23;
const int16_t Height = 23;

enum Direction { Right, Down, Left, Up, Invalid };

uint8_t _maze[Width * Height];

function showMaze()
{
    for (int8_t i = 0; i < Width * 2 + 2; ++i) {
        core.printf("-");
    }
    core.printf("\n");
    
    for (int16_t y = 0; y < Height; y++) {
        core.printf("|");

        for (int16_t x = 0; x < Width; x++) {
            switch (_maze[y * Width + x]) {
                case 1:  core.printf("[]");
                case 2:  core.printf("<>");
                default: core.printf("  ");
            }
        }
        core.printf("|\n");
    }

    for (int8_t i = 0; i < Width * 2 + 2; ++i) {
        core.printf("-");
    }
    core.printf("\n");
}

function Direction randomDirection()
{
	return Direction(core.irand(0, 3));
}

function Direction nextDirection(Direction dir)
{
    uint8_t d = uint8_t(dir) + 1;
    if (d > 3) {
        d = 0;
    }
    return Direction(d);
}

function carveMaze(int16_t x, int16_t y)
{
    Direction dir = randomDirection();

    for (int16_t count = 0; count < 4; ) {
        int16_t dx = 0;
        int16_t dy = 0;
        
        switch (dir) {
            case Direction.Right:  dx = 1;
            case Direction.Up:     dy = 1;
            case Direction.Left:   dx = -1;
            case Direction.Down:   dy = -1;
            default: break;
        }
        
        int16_t x1 = x + dx;
        int16_t y1 = y + dy;
        int16_t x2 = x1 + dx;
        int16_t y2 = y1 + dy;
        
        if (x2 > 0 && x2 < Width && y2 > 0 && y2 < Height && _maze[y1 * Width + x1] == 1 && _maze[y2 * Width + x2] == 1) {
            _maze[y1 * Width + x1] = 0;
            _maze[y2 * Width + x2] = 0;
            
            x = x2;
            y = y2;
            dir = randomDirection();
            count = 0;
        } else {
            dir = nextDirection(dir);
            count += 1;
        }
    }
}

function generateMaze()
{
    // clear maze
	core.memset(_maze, 1, Width * Height);

    _maze[1 * Width + 1] = 0;

    for (int16_t y = 1; y < Height; y += 2) {
        for (int16_t x = 1; x < Width; x += 2) {
            carveMaze(x, y);
        }
    }

    _maze[0 * Width + 1] = 0;
    _maze[(Height - 1) * Width + (Width - 2)] = 0;
}

function solveMaze()
{
    // Remove the entry and exit
    _maze[0 * Width + 1] = 1;
    _maze[(Height - 1) * Width + (Width - 2)] = 1;

    bool forward = true;
    Direction dir = Direction.Up;
    uint16_t count = 0;
    int16_t x = 1;
    int16_t y = 1;
   
    while (x != Width - 2 || y != Height - 2) {
        int16_t dx = 0;
        int16_t dy = 0;
        
        switch (dir) {
            case Direction.Right:  dx = 1;
            case Direction.Up:     dy = 1;
            case Direction.Left:   dx = -1;
            case Direction.Down:   dy = -1;
            default: break;
        }
        
        if ((forward  && _maze[(y + dy) * Width + (x + dx)] == 0) || (!forward && _maze[(y + dy) * Width + (x + dx)] == 2)) {
            _maze[y * Width + x] = forward ? 2 : 3;
            x += dx;
            y += dy;
            forward = true;
            count = 0;
            dir = Direction.Up;
        } else {
            dir = nextDirection(dir);
            count += 1;
            
            if(count > 3) {
                forward = false;
                count = 0;
            }
        }
    }

    // Replace the entry and exit
    _maze[(Height - 2) * Width + (Width - 2)] = 2;
    _maze[(Height - 1) * Width + (Width - 2)] = 2;
}


function int16_t main()
{
    core.printf("Generating %d x %d maze\n", Width, Height);

	generateMaze();
 
    core.printf("\nUnsolved Maze:\n");
    showMaze();
    solveMaze();
    core.printf("\nSolved Maze:\n");
    showMaze();
    
	return 0;
}

*/

};
