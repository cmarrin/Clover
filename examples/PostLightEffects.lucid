/*-------------------------------------------------------------------------
    This source file is a part of Lucid
    For the latest info, see https://github.com/cmarrin/Lucid
    Copyright (c) 2021-2024, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Lucid script for different Post Light Controller effects
//
// Current effects:
//
//      'c' - Constant color
//              Args:   0, 1, 2       Color
//
//      'm' - Multicolor: rotate between 4 passed color at passed rate
//              Args:   0..2       Color 1
//                      3..5       Color 2
//                      6..8       Color 3
//                      9..11      Color 4
//                      12         Speed between cross fades in 1 second intervals (0-255)
//
//      'p' - Pulse: Single color pulses dim and bright at passed speed
//              Args:   0, 1, 2     Color
//                      3           Speed (0-7)
//
//      'f' - Flicker: Single color flickers randomly at passed speed
//              Args:   0, 1, 2     Color
//                      3           Speed (0-7)
//
//      'r' - Rainbow: cycle colors through part of entire rainbow at passed speed
//              Args:   0, 1, 2     Color
//                      3           Speed of color change (0-15)
//                      4           Range how far from passed color to change.
//                                  0 - small change, 7 - full range
//                                  0-6 colors bounce back and forth, 7 colors loop around

struct PostLightEffects
{

struct FlickerSpeedEntry
{
    uint8 min;
    uint8 max;
};

struct LedEntry
{
    float cur;
    float inc;
    float min;
    float max;
};

struct Color
{
    float h;
    float s;
    float v;
};

const float FadeInc         = 0.04;
const float PulseMin        = 0.3;
const float BrightestMin    = 0.6;
const float BrightestMax    = 1.0;
const float FlickerMin      = 0.2;
const uint8 NumLights       = 8;
const int16 NumLevels       = 8;
const int16 Delay           = 25; // in ms
const int16 PulseSpeedMult  = 35;
const int16 RainbowSpeedMult= 300;

const FlickerSpeedEntry FlickerSpeedTable[ ] =
{
    1, 2,
    2, 4,
    4, 6,
    6, 8,
    8, 10,
    10, 12,
    12, 14,
    14, 16,
};

LedEntry* led;

float flickerStepsMin;
float flickerStepsMax;
float flickerBrightnessMod;
int16 multiColorDurationMax; // Number of counts between fade (based on Delay)
int16 multiColorDurationCur;
int16 multiColorIndex;
bool multiColorIsCrossfading;

uint8 speed;
uint8 range;

Color colors[4];
LedEntry leds[8];

function initFade(int8 c, bool fadeIn)
{
    led.min = 0.0;
    led.max = colors[c].v;
    led.cur = 0.0;
    led.inc = FadeInc;

    if (!fadeIn) {
        led.cur = led.max;
        led.inc = -led.inc;
    }
}

function init(uint8 cmd)
{
	core.loadColorArg(colors[0]);
 
    if (cmd == 'm') {
        core.loadColorArg(colors[1]);
        core.loadColorArg(colors[2]);
        core.loadColorArg(colors[3]);
    }
    
    if (cmd != 'c') {
        speed = core.argint8();
    }
    
    if (cmd == 'r') {
        range = core.argint8();
    }
    
    led = &leds[0];
    
    if (cmd == 'm') {
        multiColorDurationMax = speed * 1000 / Delay;
        
        // Start on a random color
        multiColorIndex = core.irand(0, 4);

        // Start by fading in the first color
        initFade(multiColorIndex, true);

        multiColorIsCrossfading = true;

        // Start at a random place in the delay
        multiColorDurationCur = core.irand(0, multiColorDurationMax);
        
        return;
    }
    
    if (cmd == 'p') {
        led.max = colors[0].v;
        led.min = led.max - (float(speed + 1) / 8.0 * (led.max - PulseMin));
        
        // add some randomization to the duration
        led.inc = (led.max - led.min) / (float((NumLevels - speed) * PulseSpeedMult) * core.frand(1, 2));

        // Start with a random value for cur
        led.cur = core.frand(led.min, led.max);
        
        return;
    }
    
    if (cmd == 'f') {
        core.memset(&leds, 0, NumLights * 4);

        flickerStepsMin = float(FlickerSpeedTable[speed].min) * 255;
        flickerStepsMax = float(FlickerSpeedTable[speed].max) * 255;
        
        // Modify the brightness to make it between 0.5 and 1.0
        flickerBrightnessMod = colors[0].v / 2.0 + 0.5;
        
        return;
    }
    
    if (cmd == 'r') {
        led.min = colors[0].h;
        
        float range = 1.0 - led.min;
        float r = float(range + 1) / 8;
        if (r > 1) {
            r = 1;
        }
        led.max = led.min + range * r;
        
        speed = 16 - speed;
        if (speed < 1 || speed > 16) {
            speed = 16;
        }
        speed *= RainbowSpeedMult;
        led.inc = (led.max - led.min) / float(speed);

        // Start with a random value for cur
        led.cur = core.frand(led.min, led.max);
        
        return;
    }
}

// Effects take one or more colors and possibly other args
// Colors are hue, saturation, brightness (uint8). 0 is
// 0%, 255 is 100%.

//
// Constant color
//
// Args:  0, 1, 2       Color

function int16 constantLoop()
{
	core.setAllLights(colors[0]);
    return Delay;
}

// Multicolor - pass 4 colors and cross fade between them
//
// Args:  0..2       Color 1
//        3..5       Color 2
//        6..8       Color 3
//        9..11      Color 4
//        12         Duration between cross fades in 1 second intervals (0-255)

function int16 multicolorLoop()
{
    if (multiColorIsCrossfading) {
        int8 animateResult = core.animate(led);
        if (animateResult < 0) {
            // The current light has faded out
            // Restore the Val of the current color
            colors[multiColorIndex].v = led.max;

            if (++multiColorIndex >= 4) {
                multiColorIndex = 0;
            }

            initFade(multiColorIndex, true);
        } else if (animateResult > 0) {
            // The new light has completed fading in
            multiColorIsCrossfading = false;
            if (multiColorDurationCur >= multiColorDurationMax) {
                multiColorDurationCur = 0;
            }
        }

        colors[multiColorIndex].v = led.cur;
        core.setAllLights(colors[multiColorIndex]);
        return Delay;
    }

    if (++multiColorDurationCur < multiColorDurationMax) {
        return Delay;
    }

    // We've hit the desired duration, transition
    multiColorIsCrossfading = true;
    
    // Add random amount to duration
    multiColorDurationMax = int16(float(speed * 1000) * core.frand(1, 1.5)) / Delay;

    return Delay;
}

//
// Pulse effect
//
// Args:    0, 1, 2     Color
//          3           Speed
//          4           Duration
//
function int16 pulseLoop()
{
    core.animate(&leds[0]);

    led = &leds[0];
    colors[0].v = led.cur;
    core.setAllLights(colors[0]);
    return Delay;
}

//
// Flicker effect
//
// Args:    0, 1, 2     Color
//          3           Speed (0-7)
//
function int16 flickerLoop()
{
    for (uint8 i = 0; i < NumLights; ++i) {
        led = &leds[i];
        if (core.animate(led) == -1) {
            // We are done with the throb. We always start at BrightnessMin.
            // Select a new inc (how fast it pulses), and  max (how bright it
            // gets) based on the speed value.
            led.cur = FlickerMin;
            led.min = FlickerMin;
            
            led.inc = core.frand(flickerStepsMin, flickerStepsMax);
            
            // Adjust max by brightness
            led.max = core.frand(BrightestMin, BrightestMax);
            led.max  *= flickerBrightnessMod;
        }

        colors[0].v = led.cur;
        core.setLight(i, colors[0]);
    }
    
    return Delay;
}

//
// Rainbow Effect
//
//              Args:   0, 1, 2     Color
//                      3           Speed of color change (0-15)
//                      4           Range how far from passed color to change.
//                                  0 - small change, 7 - full range
//                                  0-6 colors bounce back and forth, 7 colors loop around

function int16 rainbowLoop()
{
    core.animate(led);

    colors[0].h = led.cur;
    core.setAllLights(colors[0]);
    return Delay;
}

initialize()
{
    // For now let's just run flicker. Later we will have
    // a way to select the effect
    
    core.initArgs();
    
    // First arg is a uint8 command. If it's an alpha character
    // This is the init for the selected command. If that's the
    // case the following args are specific to that command.
    // If it's '*' this is the loop for that command. For now
    // we assume the 'f' (flicker) command.
    uint8 cmd = core.argint8();
    if (cmd == '*') {
        // Loop
        return flickerLoop();
    }
    
    // Init
    init(cmd);
}

};
