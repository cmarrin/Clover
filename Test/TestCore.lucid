/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Test Core module

struct Test
{

struct AnimEntry
{
    float cur;
    float inc;
    float min;
    float max;
};
    
uint16 globalArray[20];

uint8 errors;

function showIntResults(uint8 testNo, int32 exp, int32 act)
{
    core.printf("%10s-> %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %i, got %i\n", exp, act);
        errors++;
    } else {
        core.printf("     Pass\n");
    }
}

function showFloatResults(uint8 testNo, float exp, float act)
{
    core.printf("%10s-> %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %f, got %f\n", exp, act);
        errors++;
    } else {
        core.printf("     Pass\n");
    }
}

Test()
{
    errors = 0;
    
    core.printf("\nTest Core Module\n");

    float f;
    int32 i;
    uint8 u;

    core.printf("\nType Conversion\n");

    f = 5.3;
    u = 200;

    showIntResults(1, 5, int32(f));
    showIntResults(2, 200, int32(u));
    showFloatResults(3, 7.5, float(7) + 0.5);

    core.printf("\nRandom\n");

    i = core.irand(3, 33);
    showIntResults(4, 1, i >= 3 && i <= 33);

    f = core.frand(3.5, 5.5);
    showIntResults(5, 1, f >= 3.5 && f <= 5.5);

    core.printf("\nmemset\n");

    uint8 localArray[10];

    core.memset(&localArray, 200, 10);
    showIntResults(6, 200, localArray[5]);
    core.memset(&globalArray, 0x55, 20 * 2);
    showIntResults(7, 0x5555, globalArray[9]);

    core.printf("\nMin/Max\n");
    showIntResults(8, 20, core.imin(20, 21));
    showIntResults(9, 10, core.imin(11, 10));
    showIntResults(10, 21, core.imax(20, 21));
    showIntResults(11, 11, core.imax(11, 10));
    showFloatResults(12, 20.5, core.fmin(20.5, 21.5));
    showFloatResults(13, 10.5, core.fmin(11.5, 10.5));
    showFloatResults(14, 21.5, core.fmax(20.5, 21.5));
    showFloatResults(15, 11.5, core.fmax(11.5, 10.5));

    core.printf("\nArgs\n");

    // incoming args are an uint8 ('f') and uint16 (2)
    core.initArgs();
    showIntResults(16, 'f', core.argint8());
    showIntResults(17, 2, core.argint16());

    core.printf("\nAnimate\n");

    // Test both passing ref to struct and pointer to struct
    AnimEntry entry;
    AnimEntry* entry2;
    entry2 = &entry;

    entry.cur = 1.5;
    entry.inc = 0.5;
    entry.min = 1;
    entry.max = 3;

    showIntResults(18, 0, core.animate(entry2));
    showFloatResults(19, 2, entry.cur);
    showIntResults(20, 0, core.animate(&entry));
    showFloatResults(21, 2.5, entry.cur);
    showIntResults(22, 1, core.animate(&entry));
    showFloatResults(23, 3, entry.cur);
    showIntResults(24, 0, core.animate(&entry));
    showFloatResults(25, 2.5, entry.cur);
    showIntResults(26, 0, core.animate(&entry));
    showFloatResults(27, 2.0, entry.cur);
    showIntResults(28, 0, core.animate(&entry));
    showFloatResults(29, 1.5, entry.cur);
    showIntResults(30, -1, core.animate(&entry));
    showFloatResults(31, 1, entry.cur);
    showIntResults(32, 0, core.animate(&entry));
    showFloatResults(33, 1.5, entry.cur);

    core.printf("\nDone.%40s", " ");
    if (errors) {
        core.printf("FAILED\n\n");
    } else {
        core.printf("Passed\n\n");
    }
}

};
