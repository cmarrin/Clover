/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Test Core module

struct Test
{

uint16 globalArray[20];

function space(uint8 n)
{
    while (n--) {
        core.printf(" ");
    }
}

function showIntResults(uint8 testNo, int32 exp, int32 act)
{
    uint8 n;
    if (testNo > 9) {
        n = 19;
    } else {
        n = 20;
    }
   
    core.printf("    Test %hhi: ", testNo);
    space(n);
    if (exp != act) {
        core.printf("FAIL: exp %i, got %i\n", exp, act);
    } else {
        core.printf("Pass\n");
    }
}

function showFloatResults(uint8 testNo, float exp, float act)
{
    uint8 n;
    if (testNo > 9) {
        n = 19;
    } else {
        n = 20;
    }
   
    core.printf("    Test %hhi: ", testNo);
    space(n);
    if (exp != act) {
        core.printf("FAIL: exp %f, got %f\n", exp, act);
    } else {
        core.printf("Pass\n");
    }
}

initialize()
{    
    core.printf("\nTest Core Module\n");

    core.printf("\nTest Type Conversion\n");
    showIntResults(20, 5, int32(5.3));
    showFloatResults(21, 7.5, float(7) + 0.5);

    core.printf("\nTest Random\n");
    
    int32 i = core.irand(3, 5);
    showIntResults(22, 1, i >= 3 && i <= 5);

    float f = core.frand(3.5, 5.5);
    showIntResults(23, 1, f >= 3.5 && f <= 5.5);

    core.printf("\nTest memset\n");

    uint8 localArray[10];
    
    core.memset(&localArray, 200, 10);
    showIntResults(24, 200, localArray[5]);
    core.memset(&globalArray, 2134, 20);
    showIntResults(25, 2134, globalArray[9]);

    core.printf("\nTest Min/Max\n");
    showIntResults(26, 20, core.imin(20, 21));
    showIntResults(27, 10, core.imin(11, 10));
    showIntResults(28, 21, core.imax(20, 21));
    showIntResults(29, 11, core.imax(11, 10));
    showFloatResults(30, 20.5, core.fmin(20.5, 21.5));
    showFloatResults(31, 10.5, core.fmin(11.5, 10.5));
    showFloatResults(32, 21.5, core.fmax(20.5, 21.5));
    showFloatResults(33, 11.5, core.fmax(11.5, 10.5));

    core.printf("\nDone\n\n");
}

};
