/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Test Switch and Enum

struct Test
{

uint8_t errors;

function showIntResults(uint8_t testNo, int32_t exp, int32_t act)
{
    core.printf("%10s-> %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %i, got %i\n", exp, act);
        errors++;
    } else {
        core.printf("     Pass\n");
    }
}

function showFloatResults(uint8_t testNo, float exp, float act)
{
    core.printf("%10s-> %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %f, got %f\n", exp, act);
        errors++;
    } else {
        core.printf("     Pass\n");
    }
}

enum Items { First, Second, Third };

function int32_t enumFunc(Items i) { return int32_t(i); }

function int32_t main()
{
    errors = 0;
    
    core.printf("\nTest Switch and Enum\n");

    core.printf("\n    Enum\n");

    showIntResults(1, 0, int32_t(Items.First));
    showIntResults(2, 1, int32_t(Items.Second));
    showIntResults(3, 2, int32_t(Items.Third));

    showIntResults(4, 2, enumFunc(Items.Third));
    
    core.printf("\n    Switch\n");

    int8_t a = 1;
    int8_t b = -1;
    
    switch (a) {
        case 0: b = 10;
        case 1: b = 20;
        case 2: b = 30;
    }
    
    showIntResults(5, 20, b);

    a = 4;
    b = -1;

    switch (a) {
        case 0: b = 10;
        case 1: b = 20;
        case 2: b = 30;
    }
    
    showIntResults(6, -1, b);

    b = -1;

    switch (a) {
        case 0: b = 10;
        case 1: b = 20;
        default: b = 100;
        case 2: b = 30;
    }

    showIntResults(7, 100, b);
    
    Items item = Items.Second;
    b = -1;
    
    switch (item) {
        case Items.Third: b = 10;
        case Items.First: b = 20;
        case Items.Second: b = 30;
    }

    showIntResults(8, 30, b);
    
    core.printf("\nDone.%40s%s\n\n", " ", errors ? "FAILED" : "Passed");
    return errors;
}

};
