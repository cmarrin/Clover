/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Test constants, vars, operands and expressions

struct Test
{

const uint8 TestSizeDef = 12;
const int16 TestIntConst = 0xfc;
const float TestFloatConst = 3.5;

const int8 testIntTable[ ] = { 1, 2, 3, 7, 8, 9, };

float testFloatTable [ ] = { 1.5, 2.5, 3.5, 7.5, 8.5, 9.5, };

int16 testIntGlobal;

function showIntResults(uint8 testNo, int32 exp, int32 act)
{
    core.printf("%10sTest %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %i, got %i\n", exp, act);
    } else {
        core.printf("     Pass\n");
    }
}

function showFloatResults(uint8 testNo, float exp, float act)
{
    core.printf("%10sTest %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %f, got %f\n", exp, act);
    } else {
        core.printf("     Pass\n");
    }
}

float testFloatGlobal;

initialize()
{    
    testIntGlobal = 42;
    testFloatGlobal = 6.5;

    core.printf("\nTest consts, vars, ops and exprs\n");

    core.printf("\nTest Int vals\n");
    showIntResults(1, 12, TestSizeDef);
    showIntResults(2, 0xfc, TestIntConst);
    showIntResults(3, 2, testIntTable[1]);
    showIntResults(4, 7, testIntTable[3]);
    showIntResults(5, 42, testIntGlobal);
    
    core.printf("\nTest Int ops\n");
    showIntResults(6, 294, TestIntConst + testIntGlobal);
    showIntResults(7, 210, TestIntConst - testIntGlobal);
    showIntResults(8, 10584, TestIntConst * testIntGlobal);
    showIntResults(9, 6, TestIntConst / testIntGlobal);
    
    showIntResults(10, -42, -testIntGlobal);
    showIntResults(11, 0, !TestIntConst);
    showIntResults(12, -253, ~TestIntConst);
    
    showIntResults(13, 0, TestIntConst < testIntGlobal);
    showIntResults(14, 0, TestIntConst <= testIntGlobal);
    showIntResults(15, 0, TestIntConst == testIntGlobal);
    showIntResults(16, 1, TestIntConst != testIntGlobal);
    showIntResults(17, 1, TestIntConst >= testIntGlobal);
    showIntResults(18, 1, TestIntConst > testIntGlobal);
    
    int8 i = 20;
    int8 j = i++;

    showIntResults(19, 21, i);
    showIntResults(20, 20, j);
    j = i--;
    showIntResults(21, 20, i);
    showIntResults(22, 21, j);
    j = ++i;
    showIntResults(23, 21, i);
    showIntResults(24, 21, j);
    j = --i;
    showIntResults(25, 20, i);
    showIntResults(26, 20, j);

    core.printf("\nTest Int exprs\n");
    showIntResults(27, 2984, testIntTable[1] + TestSizeDef * TestIntConst - testIntGlobal);
    showIntResults(28, 2940, (testIntTable[1] + TestSizeDef) * (TestIntConst - testIntGlobal));

    core.printf("\nTest Float vals\n");
    showFloatResults(29, 3.5, TestFloatConst);
    showFloatResults(30, 2.5, testFloatTable[1]);
    showFloatResults(31, 7.5, testFloatTable[3]);
    showFloatResults(32, 6.5, testFloatGlobal);

    core.printf("\nTest Float ops\n");
    showFloatResults(33, 10, TestFloatConst + testFloatGlobal);
    showFloatResults(34, -3, TestFloatConst - testFloatGlobal);
    showFloatResults(35, 22.75, TestFloatConst * testFloatGlobal);
    showFloatResults(36, 2.5, 16.25 / testFloatGlobal);

    showFloatResults(37, -6.5, -testFloatGlobal);

    showIntResults(38, 1, TestFloatConst < testFloatGlobal);
    showIntResults(39, 1, TestFloatConst <= testFloatGlobal);
    showIntResults(40, 0, TestFloatConst == testFloatGlobal);
    showIntResults(41, 1, TestFloatConst != testFloatGlobal);
    showIntResults(42, 0, TestFloatConst >= testFloatGlobal);
    showIntResults(43, 0, TestFloatConst > testFloatGlobal);
    
    core.printf("\nTest Float exprs\n");
    showFloatResults(44, 38, testFloatTable[1] + float(TestSizeDef) * TestFloatConst - testFloatGlobal);
    showFloatResults(45, -43.5, (testFloatTable[1] + float(TestSizeDef)) * (TestFloatConst - testFloatGlobal));

    core.printf("\nDone\n\n");
}

};
