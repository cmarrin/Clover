/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Test if

struct Test
{

uint8 errors;

function showIntResults(uint8 testNo, int32 exp, int32 act)
{
    core.printf("%10s-> %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %i, got %i\n", exp, act);
        errors++;
    } else {
        core.printf("     Pass\n");
    }
}

bool didElide;

function bool elide()
{
    didElide = false;
    return false;
}

function int32 main()
{    
    errors = 0;
    
    core.printf("\nTest if\n");

    if (0) {
        showIntResults(1, 0, 1);
    } else {
        showIntResults(1, 1, 1);
    }
    
    if (1) {
        showIntResults(2, 1, 1);
    } else {
        showIntResults(2, 0, 1);
    }
    
    core.printf("\nTest logical operators\n");
    if (14 < 5) {
        showIntResults(3, 0, 1);
    } else {
        showIntResults(3, 1, 1);
    }

    if (14 <= 5) {
        showIntResults(4, 0, 1);
    } else {
        showIntResults(4, 1, 1);
    }

    if (14 == 5) {
        showIntResults(5, 0, 1);
    } else {
        showIntResults(5, 1, 1);
    }

    if (14 != 5) {
        showIntResults(6, 1, 1);
    } else {
        showIntResults(6, 0, 1);
    }

    if (14 >= 5) {
        showIntResults(7, 1, 1);
    } else {
        showIntResults(7, 0, 1);
    }

    if (14 > 5) {
        showIntResults(8, 1, 1);
    } else {
        showIntResults(8, 0, 1);
    }

    core.printf("\nTest logical or/and/not\n");

    didElide = true;
    if (1 > 2 || elide()) {
        showIntResults(9, 0, 1);
    } else {
        showIntResults(9, 1, 1);
    }
    
    showIntResults(10, false, didElide);

    if (1 > 2 || 2 < 3) {
        showIntResults(11, 1, 1);
    } else {
        showIntResults(11, 0, 1);
    }
    
    didElide = true;
    if (1 < 2 || elide()) {
        showIntResults(12, 1, 1);
    } else {
        showIntResults(12, 0, 1);
    }

    showIntResults(13, true, didElide);
    
    if (1 < 2 || 2 < 3) {
        showIntResults(14, 1, 1);
    } else {
        showIntResults(14, 0, 1);
    }
    
    didElide = true;
    if (1 > 2 && elide()) {
        showIntResults(15, 0, 1);
    } else {
        showIntResults(15, 1, 1);
    }

    showIntResults(16, true, didElide);
    
    if (1 > 2 && 2 < 3) {
        showIntResults(17, 0, 1);
    } else {
        showIntResults(17, 1, 1);
    }
    
    didElide = true;
    if (1 < 2 && elide()) {
        showIntResults(18, 0, 1);
    } else {
        showIntResults(18, 1, 1);
    }

    showIntResults(19, false, didElide);
    
    if (1 < 2 && 2 < 3) {
        showIntResults(20, 1, 1);
    } else {
        showIntResults(20, 0, 1);
    }
    
    if (!(1 < 2)) {
        showIntResults(21, 0, 1);
    } else {
        showIntResults(21, 1, 1);
    }
    
    if (!(1 > 2)) {
        showIntResults(22, 1, 1);
    } else {
        showIntResults(22, 0, 1);
    }
    
    core.printf("\nDone.%40s%s\n\n", " ", errors ? "FAILED" : "Passed");
    return errors;
}

};
