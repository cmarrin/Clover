/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Test pointer and struct

struct Test
{

uint8 errors = 0;

struct A
{
    int8 b = 12;
    int16 c = 24;
    int32 d;
    
    A(int32 q)
    {
        d = q;
    }
    
    function int32 f(int8 x, int8 y)
    {
        return x + y;
    }
};

function showIntResults(uint8 testNo, int32 exp, int32 act)
{
    core.printf("%10s-> %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %i, got %i\n", exp, act);
        errors++;
    } else {
        core.printf("     Pass\n");
    }
}

function showFloatResults(uint8 testNo, float exp, float act)
{
    core.printf("%10s-> %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %f, got %f\n", exp, act);
        errors++;
    } else {
        core.printf("     Pass\n");
    }
}

struct TestStruct
{
    int16 a;
    float b;
    int8 c;
};

TestStruct globalTestStruct = { 10, 20.5, 30 };

function int8 testFunction(int8* p, float f)
{
    return *p + int8(f);
}

function int32 main()
{
    errors = 0;
    
    core.printf("\nTest Struct, Ptrs and Refs\n");
    
    core.printf("\nStruct\n");
    TestStruct s;
    int8 i = 22;
    float f = 3.5;
    s.a = i;
    s.b = f;
    s.c = 5;

    showIntResults(1, 22, s.a);
    showFloatResults(2, 3.5, s.b);
    showIntResults(3, 5, s.c);

    core.printf("\nTest Ptr\n");
    int8 c;
    int8* x;
    x = &c;
    *x = 22;

    showIntResults(4, 22, *x);
    
    core.printf("\nPassing Ptr to Func\n");
    showIntResults(5, 25, testFunction(x, 3.5));
    
    core.printf("\nPtr to Struct\n");
    TestStruct* ss;
    ss = &s;
    ss.a = 17;
    ss.b = 17.5;
    ss.c = 18;

    showIntResults(6, 17, ss.a);
    showFloatResults(7, 17.5, ss.b);
    showIntResults(8, 18, ss.c);
    
    core.printf("\nArray/Ptr\n");
    
    int32 arr[10];
    int32* arrp = &arr;
    arrp[5] = 100;
    showIntResults(9, 100, arrp[5]);
    
    TestStruct testArray[5];
    testArray[2].b = 5.5;
    showFloatResults(10, 5.5, testArray[2].b);
    
    testArray[3].c = 12;
    TestStruct* ts = &testArray[3];
    ts.a = 4;
    showIntResults(11, 12, ts.c);
    showIntResults(12, 4, ts.a);

    TestStruct localTestStruct = { 1, 2.5, 3 };

    core.printf("\nSrruct init\n");
    showIntResults(13, 10, globalTestStruct.a);
    showFloatResults(14, 20.5, globalTestStruct.b);
    showIntResults(15, 30, globalTestStruct.c);
    showIntResults(16, 1, localTestStruct.a);
    showFloatResults(17, 2.5, localTestStruct.b);
    showIntResults(18, 3, localTestStruct.c);

    core.printf("\nSrruct ctors\n");

    A a;
    A b(48);
    
    int32 result = a.f(5, 6);
    
    showIntResults(19, 12, a.b);
    showIntResults(20, 24, a.c);
    showIntResults(21, 0, a.d);
    showIntResults(22, 11, result);
    showIntResults(23, 48, b.d);

    core.printf("\nDone.%40s%s\n\n", " ", errors ? "FAILED" : "Passed");
    return errors;
}

};
