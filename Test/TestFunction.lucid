/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Test functions

struct Test
{

const int16 TestSizeDef = 12;
const int16 testIntConst = 10;
const float testFloatConst = 3.5;

int16 testIntGlobal;
float testFloatGlobal;

function showIntResults(uint8 testNo, int32 exp, int32 act)
{
    core.printf("%10sTest %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %i, got %i\n", exp, act);
    } else {
        core.printf("     Pass\n");
    }
}

function showFloatResults(uint8 testNo, float exp, float act)
{
    core.printf("%10sTest %2hhi: ", " ", testNo);
    if (exp != act) {
        core.printf("     FAIL: exp %f, got %f\n", exp, act);
    } else {
        core.printf("     Pass\n");
    }
}

// Dummy function just to make we make the call
function function1()
{
    showIntResults(1, 0, 0);
}

function int16 function2(int16 a, int16 b)
{
    int16 c = 7;
    return a + b + c + TestSizeDef + testIntConst + testIntGlobal;
}

function float function3(float a, float b)
{
    float c = 123;
    return a + b + c + TestSizeDef + testFloatConst + testFloatGlobal;
}

function int16 function4(int16 a, float b)
{
    return a + int16(b);
}

initialize()
{
    core.printf("\nTest functions\n");

    testIntGlobal = 42;
    testFloatGlobal = 6.5;

    function1();
    
    showIntResults(2, 82, function2( 5, 6));
    showFloatResults(3, 195.5, function3( 20, 30.5));
    showIntResults(4, 110, function4( 50, 60.5));

    core.printf("\nDone\n\n");
}

};
